import random
import nextcord
from nextcord.ext import commands, tasks
import json
import os

class StockInvestment(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.stocks = {
            "Puppy88 - nh√† c√°i h√†ng ƒë·∫ßu ch√¢u √¢u": 350000,
            "Cty c·ªï ph·∫ßn s·ªë h·ªçc 6h30": 680000,
            "Cty Th∆∞∆°ng M·∫°i v√† ƒê·∫ßu T∆∞ crypto": 840000,
            "Cty c·ªï ph·∫ßn TNHH MTV V·∫°n Th·ªãnh Ph√°t": 400000,
            "Cty c·ªï ph·∫ßn th·∫ø gi·ªõi di ƒë·ªông": 400000,
            "T·∫≠p ƒêo√†n C√¥ng Ngh·ªá Space X": 480000
        
        }
        self.previous_prices = self.stocks.copy()
        self.stock_market.start()  # task loop
        self.banner_url = "https://i.pinimg.com/originals/ab/27/3e/ab273ef561d66b5443c9f6adbca443f6.gif"  # Thay b·∫±ng URL c·ªßa banner c·ªßa b·∫°n

    def get_users(self):
        """L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ file JSON."""
        if not os.path.exists("users.json"):
            return {}
        with open("users.json", "r") as f:
            return json.load(f)

    def save_users(self, users):
        """L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng v√†o file JSON."""
        with open("users.json", "w") as f:
            json.dump(users, f, indent=4)

    def format_currency(self, amount):
        """ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn ƒë·ªÉ hi·ªÉn th·ªã v√† l√†m tr√≤n s·ªë."""
        return "{:,}".format(round(amount))

    @tasks.loop(minutes=1)
    async def stock_market(self):
        """M√¥ ph·ªèng s·ª± thay ƒë·ªïi gi√° c·ªï phi·∫øu m·ªói ph√∫t."""
        for stock in self.stocks:
            change = random.uniform(-0.05, 0.05)  # Gi√° thay ƒë·ªïi t·ª´ -50% ƒë·∫øn +50%
            self.stocks[stock] = round(self.stocks[stock] * (1 + change))

    @commands.command(name="list")
    async def list_stocks(self, ctx):
        """Hi·ªÉn th·ªã danh s√°ch c·ªï phi·∫øu ƒë√£ mua c·ªßa ng∆∞·ªùi d√πng."""
        user_id = str(ctx.author.id)
        users = self.get_users()

        if user_id not in users or "stocks" not in users[user_id]:
            await ctx.send(f"{ctx.author.mention} B·∫°n kh√¥ng c√≥ c·ªï phi·∫øu n√†o trong danh m·ª•c ƒë·∫ßu t∆∞.")
            return

        portfolio = users[user_id]["stocks"]
        if not portfolio:
            await ctx.send(f"{ctx.author.mention} B·∫°n kh√¥ng c√≥ c·ªï phi·∫øu n√†o trong danh m·ª•c ƒë·∫ßu t∆∞.")
            return
        
        embed = nextcord.Embed(title="Danh M·ª•c ƒê·∫ßu T∆∞ C·ªßa B·∫°n", color=nextcord.Color.green())
        for idx, (stock, data) in enumerate(portfolio.items(), 1):
            amount, buy_price = data
            embed.add_field(name=f"{idx}. {stock}", value=f"S·ªë l∆∞·ª£ng: {amount} c·ªï phi·∫øu\nGi√° mua: {self.format_currency(buy_price)} VND", inline=False)
        
        embed.set_footer(text="C·∫≠p nh·∫≠t gi√° sau m·ªói ph√∫t")
        embed.set_image(url="https://i.pinimg.com/originals/ab/27/3e/ab273ef561d66b5443c9f6adbca443f6.gif")  # Thay b·∫±ng URL c·ªßa banner l·ªõn c·ªßa b·∫°n
        await ctx.send(embed=embed)

    @commands.command(name="buy")
    async def buy_stock(self, ctx, stock_number: int, amount: int):
        """Mua c·ªï phi·∫øu."""
        if amount <= 0:
            await ctx.send(f"{ctx.author.mention} S·ªë l∆∞·ª£ng c·ªï phi·∫øu ph·∫£i l√† s·ªë d∆∞∆°ng.")
            return

        user_id = str(ctx.author.id)
        stock_list = list(self.stocks.keys())
        
        if stock_number < 1 or stock_number > len(stock_list):
            await ctx.send(f"{ctx.author.mention} S·ªë th·ª© t·ª± c·ªï phi·∫øu kh√¥ng h·ª£p l·ªá.")
            return

        stock = stock_list[stock_number - 1]
        stock_price = round(self.stocks[stock] * amount)

        users = self.get_users()

        if user_id not in users or users[user_id]["balance"] < stock_price:
            await ctx.send(f"{ctx.author.mention} B·∫°n kh√¥ng c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ mua c·ªï phi·∫øu n√†y.")
            return

        users[user_id]["balance"] -= stock_price
        if "stocks" not in users[user_id]:
            users[user_id]["stocks"] = {}
        if stock in users[user_id]["stocks"]:
            current_amount, _ = users[user_id]["stocks"][stock]
            users[user_id]["stocks"][stock] = (current_amount + amount, round(self.stocks[stock]))
        else:
            users[user_id]["stocks"][stock] = (amount, round(self.stocks[stock]))

        self.save_users(users)
        await ctx.send(f"{ctx.author.mention} B·∫°n ƒë√£ mua {amount} c·ªï phi·∫øu {stock} v·ªõi gi√° {self.format_currency(stock_price)} VND.")

    @commands.command(name="sell")
    async def sell_stock(self, ctx, stock_number: int, amount: int):
        """B√°n c·ªï phi·∫øu."""
        if amount <= 0:
            await ctx.send(f"{ctx.author.mention} S·ªë l∆∞·ª£ng c·ªï phi·∫øu ph·∫£i l√† s·ªë d∆∞∆°ng.")
            return

        user_id = str(ctx.author.id)
        users = self.get_users()

        if user_id not in users or "stocks" not in users[user_id]:
            await ctx.send(f"{ctx.author.mention} B·∫°n kh√¥ng c√≥ c·ªï phi·∫øu n√†o trong danh m·ª•c ƒë·∫ßu t∆∞.")
            return
        
        portfolio = users[user_id]["stocks"]
        if not portfolio or stock_number < 1 or stock_number > len(portfolio):
            await ctx.send(f"{ctx.author.mention} S·ªë th·ª© t·ª± c·ªï phi·∫øu kh√¥ng h·ª£p l·ªá.")
            return

        stock = list(portfolio.keys())[stock_number - 1]
        if amount > portfolio[stock][0]:
            await ctx.send(f"{ctx.author.mention} B·∫°n kh√¥ng c√≥ ƒë·ªß c·ªï phi·∫øu ƒë·ªÉ b√°n.")
            return

        # T√≠nh to√°n l√£i ho·∫∑c l·ªó
        buy_price = portfolio[stock][1]
        sell_price = self.stocks[stock]
        profit_or_loss = round((sell_price - buy_price) * amount)
        
        stock_sale_price = round(sell_price * amount)
        users[user_id]["balance"] += stock_sale_price
        users[user_id]["stocks"][stock] = (portfolio[stock][0] - amount, buy_price)
        if users[user_id]["stocks"][stock][0] == 0:
            del users[user_id]["stocks"][stock]

        self.save_users(users)
        if profit_or_loss >= 0: 
            await ctx.send(f"{ctx.author.mention} B·∫°n ƒë√£ b√°n {amount} c·ªï phi·∫øu {stock} v·ªõi gi√° {self.format_currency(stock_sale_price)} VND. B·∫°n ƒë√£ l√£i {self.format_currency(profit_or_loss)} VND.")
        else:
            await ctx.send(f"{ctx.author.mention} B·∫°n ƒë√£ b√°n {amount} c·ªï phi·∫øu {stock} v·ªõi gi√° {self.format_currency(stock_sale_price)} VND. B·∫°n ƒë√£ l·ªó {self.format_currency(-profit_or_loss)} VND.")

    @commands.command(name="tt")
    async def show_stocks(self, ctx):
        """Hi·ªÉn th·ªã gi√° c·ªï phi·∫øu hi·ªán t·∫°i."""
        embed = nextcord.Embed(title="Gi√° C·ªï Phi·∫øu Hi·ªán T·∫°i", color=nextcord.Color.blue())
        for idx, (stock, price) in enumerate(self.stocks.items(), 1):
            previous_price = self.previous_prices[stock]
            emoji = "üìà" if price > previous_price else "üìâ"
            embed.add_field(name=f"{idx}. {stock}", value=f"Gi√°: {self.format_currency(price)} VND {emoji}", inline=False)

        embed.set_footer(text="C·∫≠p nh·∫≠t gi√° sau m·ªói ph√∫t")
        embed.set_image(url="https://i.pinimg.com/originals/ab/27/3e/ab273ef561d66b5443c9f6adbca443f6.gif")  # Thay b·∫±ng URL c·ªßa banner l·ªõn c·ªßa b·∫°n
        await ctx.send(embed=embed)

def setup(bot):
    bot.add_cog(StockInvestment(bot))

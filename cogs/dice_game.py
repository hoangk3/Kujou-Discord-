import random
import json
import os
import nextcord
from nextcord.ext import commands
from datetime import datetime

class DiceGame(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.cooldowns = {}

    def get_users(self):
        """L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ file JSON."""
        if not os.path.exists("users.json"):
            return {}
        with open("users.json", "r") as f:
            return json.load(f)

    def save_users(self, users):
        """L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng v√†o file JSON."""
        with open("users.json", "w") as f:
            json.dump(users, f, indent=4)

    def format_currency(self, amount):
        """ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn ƒë·ªÉ hi·ªÉn th·ªã."""
        return "{:,}".format(amount)

    def get_dice_emoji(self, number):
        """Tr·∫£ v·ªÅ emoji ƒë·∫°i di·ªán cho s·ªë m·∫∑t x√∫c x·∫Øc."""
        dice_emojis = {
            1: "‚öÄ",
            2: "‚öÅ",
            3: "‚öÇ",
            4: "‚öÉ",
            5: "‚öÑ",
            6: "‚öÖ"
        }
        return dice_emojis.get(number, "üé≤")

    @commands.command(name="tx")
    async def taixiu(self, ctx, choice: str, bet: str):
        """L·ªánh ch∆°i game t√†i x·ªâu."""
        user_id = str(ctx.author.id)
        choice = choice.lower()

        if choice not in ["t√†i", "x·ªâu"]:
            await ctx.send(f"{ctx.author.mention} ‚ùå B·∫°n ph·∫£i ch·ªçn 't√†i' ho·∫∑c 'x·ªâu'.")
            return

        users = self.get_users()

        # Kh·ªüi t·∫°o d·ªØ li·ªáu ng∆∞·ªùi d√πng n·∫øu ch∆∞a c√≥
        if user_id not in users:
            users[user_id] = {"balance": 0}

        # Ki·ªÉm tra cooldown
        if user_id in self.cooldowns:
            remaining_time = self.cooldowns[user_id] - ctx.message.created_at.timestamp()
            if remaining_time > 0:
                await ctx.send(f"{ctx.author.mention} ‚è≥ B·∫°n ph·∫£i ƒë·ª£i {int(remaining_time)} gi√¢y n·ªØa m·ªõi c√≥ th·ªÉ ch∆°i ti·∫øp.")
                return

        if bet.lower() == "all":
            bet_amount = users.get(user_id, {}).get("balance", 0)
            if bet_amount > 1_000_000_000:
                bet_amount = 1_000_000_000  
        else:
            try:
                bet_amount = int(bet)
                if bet_amount <= 0 or bet_amount > 1_000_000_000:
                    await ctx.send(f"{ctx.author.mention} ‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng l·ªõn h∆°n 0 v√† kh√¥ng v∆∞·ª£t qu√° 1B!")
                    return
            except ValueError:
                await ctx.send(f"{ctx.author.mention} ‚ùå Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all' ƒë·ªÉ c∆∞·ª£c t·∫•t c·∫£.")
                return

        if user_id not in users or users[user_id]["balance"] < bet_amount:
            await ctx.send(f"{ctx.author.mention} üí∏ B·∫°n kh√¥ng c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.")
            return

        # Tr·ª´ ti·ªÅn c∆∞·ª£c ngay khi ƒë·∫∑t c∆∞·ª£c
        users[user_id]["balance"] -= bet_amount

        # X√∫c x·∫Øc
        dice1 = random.randint(1, 6)
        dice2 = random.randint(1, 6)
        dice3 = random.randint(1, 6)
        total = dice1 + dice2 + dice3

        # X√°c ƒë·ªãnh k·∫øt qu·∫£
        if total in [3, 18]:
            result = "n·ªï h≈©"
        elif 3 <= total <= 10:
            result = "x·ªâu"
        else:
            result = "t√†i"

        # X√°c ƒë·ªãnh chi·∫øn th·∫Øng
        win = choice == result or result == "n·ªï h≈©"

        # C·∫≠p nh·∫≠t s·ªë d∆∞ ngay l·∫≠p t·ª©c
        if win:
            if result == "n·ªï h≈©":
                prize = int(bet_amount * 5)
                users[user_id]["balance"] += prize
                message = f"{ctx.author.mention} üéâ N·ªï h≈©! B·∫°n nh·∫≠n ƒë∆∞·ª£c {self.format_currency(prize)} VND."
            else:
                prize = int(bet_amount * 2)
                users[user_id]["balance"] += prize
                message = f"{ctx.author.mention} ü•≥ B·∫°n ƒë√£ th·∫Øng! B·∫°n nh·∫≠n ƒë∆∞·ª£c {self.format_currency(prize)} VND."
        else:
            message = f"{ctx.author.mention} üò¢ B·∫°n ƒë√£ thua! B·∫°n m·∫•t {self.format_currency(bet_amount)} VND."

        # C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
        self.save_users(users)

        # Hi·ªÉn th·ªã x√∫c x·∫Øc v·ªõi emoji
        dice_emojis = f"{self.get_dice_emoji(dice1)} {self.get_dice_emoji(dice2)} {self.get_dice_emoji(dice3)}"

        # T·∫°o Embed ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
        embed = nextcord.Embed(
            title="üé≤ K·∫øt Qu·∫£ X√∫c X·∫Øc üé≤",
            description=f"X√∫c x·∫Øc: {dice_emojis} ({total} - {result.upper()})",
            color=0x00ff00  # M√†u xanh l·ª•c
        )

        embed.add_field(name="L·ª±a ch·ªçn c·ªßa b·∫°n", value=choice.upper(), inline=True)
        embed.add_field(name="K·∫øt qu·∫£", value=result.upper(), inline=True)
        embed.add_field(name="Th√¥ng b√°o", value=message, inline=False)
        embed.add_field(name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i", value=f"{self.format_currency(users[user_id]['balance'])} VND", inline=False)

        # G·ª≠i Embed k·∫øt qu·∫£
        await ctx.send(embed=embed)

        # C·∫≠p nh·∫≠t cooldown
        self.cooldowns[user_id] = ctx.message.created_at.timestamp() + 5

def setup(bot):
    bot.add_cog(DiceGame(bot))
